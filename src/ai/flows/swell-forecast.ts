// This file is generated by EVERYBodYsurf

/**
 * @fileOverview Provides a GenAI-powered surf report and/or forecast
 * witch full detail for pros, and user-friendly summarries for newbies.
 *
 * - getSwellForecast - A function that generates a swell forecast summary.
 * - SwellForecastInput - The input type for the getSwellForecast function.
 * - SwellForecastOutput - The return type for the getSwellForecast function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const SwellForecastInputSchema = z.object({ // This is the schema for the input received by the `getSwellForecast` function
 surfSpot: z.string().describe('The name of the surf spot to get the swell forecast for.'),//
  water_temp_c: z.number().optional().describe('Water temperature in Celsius.'),
});

export type SwellForecastInput = z.infer<typeof SwellForecastInputSchema>;

const SwellForecastOutputSchema = z.object({
  forecastSummary: z.string().describe('A concise, user-friendly summary of the surf conditions for the specified surf spot, including wave height, period, wind, and tide information. It should also advise the user whether, when and where to go surfing, citing to expert blogs, forecasts or historical performance in its answer.'),
  detailedData: z.object({ // This is the schema for the detailed data that the AI model will receive
    surfSpot: z.string().describe('The name of the surf spot to get the swell forecast for.'), //
    date: z.string().describe('Date of the forecast.'),
    date_epoch: z.number().describe('Forecast date as unix time.'),
    maxtemp_c: z.number().describe('Maximum temperature in Celsius.'),
    maxtemp_f: z.number().describe('Maximum temperature in Fahrenheit.'),
    mintemp_c: z.number().describe('Minimum temperature in Celsius.'),
    mintemp_f: z.number().describe('Minimum temperature in Fahrenheit.'),
    avgtemp_c: z.number().describe('Average temperature in Celsius.'),
    avgtemp_f: z.number().describe('Average temperature in Fahrenheit.'),
    maxwind_mph: z.number().describe('Maximum wind speed in miles per hour.'),
    maxwind_kph: z.number().describe('Maximum wind speed in kilometer per hour.'),
    totalprecip_mm: z.number().describe('Total precipitation in millimeters.'),
    totalprecip_in: z.number().describe('Total precipitation in inches.'),
    avgvis_km: z.number().describe('Average visibility in kilometers.'),
    avgvis_miles: z.number().describe('Average visibility in miles.'),
    avghumidity: z.number().describe('Average humidity.'),
    condition_icon: z.string().describe('Weather condition icon.'), // Day condition icon
    uv: z.number().describe('UV index.'),
    sunrise: z.string().describe('Sunrise time.'),
    sunset: z.string().describe('Sunset time.'),
    moonrise: z.string().describe('Moonrise time.'),
    moonset: z.string().describe('Moonset time.'),
    moon_phase: z.string().describe('Moon phase.'),
    moon_illumination: z.number().describe('Moon illumination percentage.'),
    is_moon_up: z.number().describe('Whether the moon is currently up (1 = Yes, 0 = No).'),
    is_sun_up: z.number().describe('Whether the sun is currently up (1 = Yes, 0 = No).'),
    tide_time: z.string().describe('Time of the tide.'),
    tide_height_mt: z.number().describe('Height of the tide in meters.'),
    tide_type: z.string().describe('Type of the tide (e.g., HIGH, LOW).'),
    hourlyForecast: z.array(z.object({
      time_epoch: z.number().describe('Time as epoch.'),
      time: z.string().describe('Date and time.'),
      temp_c: z.number().describe('Temperature in celsius.'),
      temp_f: z.number().describe('Temperature in fahrenheit.'),
      condition_icon: z.string().describe('Weather condition icon.'), // Hourly condition icon
      wind_mph: z.number().describe('Maximum wind speed in miles per hour.'),
      wind_kph: z.number().describe('Maximum wind speed in kilometer per hour.'),
      wind_degree: z.number().describe('Wind direction in degrees.'),
      wind_dir: z.string().describe('Wind direction as 16 point compass.'),
      pressure_mb: z.number().describe('Pressure in millibars.'),
      pressure_in: z.number().describe('Pressure in inches.'),
      precip_mm: z.number().describe('Precipitation amount in millimeters.'),
      precip_in: z.number().describe('Precipitation amount in inches.'),
      humidity: z.number().describe('Humidity as percentage.'),
      cloud: z.number().describe('Cloud cover as percentage.'),
      feelslike_c: z.number().describe('Feels like temperature as celcius.'),
      feelslike_f: z.number().describe('Feels like temperature as fahrenheit.'),
      windchill_c: z.number().describe('Windchill temperature in celcius.'),
      windchill_f: z.number().describe('Windchill temperature in fahrenheit.'),
      heatindex_c: z.number().describe('Heat index in celcius.'),
      heatindex_f: z.number().describe('Heat index in fahrenheit.'),
      dewpoint_c: z.number().describe('Dew point in celcius.'),
      dewpoint_f: z.number().describe('Dew point in fahrenheit.'),
      is_day: z.number().describe('Whether to show day condition icon or night icon (1 = Yes, 0 = No).'),
      vis_km: z.number().describe('Visibility in kilometer.'),
      vis_miles: z.number().describe('Visibility in miles.'),
      gust_mph: z.number().describe('Wind gust in miles per hour.'),
      gust_kph: z.number().describe('Wind gust in kilometer per hour.'),
      sig_ht_mt: z.number().describe('Significant wave height in metres.'),
      swell_ht_mt: z.number().describe('Swell wave height in metres.'),
      swell_ht_ft: z.number().describe('Swell wave height in feet.'),
      uv: z.number().describe('UV index.'),
      swell_dir: z.number().describe('Swell direction in degrees.'),
      swell_dir_16_point: z.string().describe('Swell direction in 16 point compass.'),
      swell_period_secs: z.number().describe('Swell period in seconds.'),
      water_temp_c: z.number().describe('Water temperature in Celcius.'),
      water_temp_f: z.number().describe('Water temperature in Fahrenheit.'),
    })).describe('Hourly weather and swell data.'),
  }).describe('Detailed extracted weather and swell data.'),
});
export type SwellForecastOutput = z.infer<typeof SwellForecastOutputSchema>;

export async function getSwellForecast(input: { surfSpot: string; date: string }): Promise<SwellForecastOutput> {
 console.log('getSwellForecast function called with input:', input);
  const API_KEY = process.env.WEATHER_API_DOTCOM_KEY;
  const BASE_URL = 'https://api.weatherapi.com/v1/marine.json';

  const url = `${BASE_URL}?key=${API_KEY}&q=${input.surfSpot}&dt=${input.date}&days=1&aqi=no&alerts=no&tides=yes`;
 console.log('Fetching weather data from URL:', url);
  try {
    const response = await fetch(url);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

        console.log('WeatherAPI Response Data:', data);

    // Extract relevant data based on the schema
    const extractedData = {
      surfSpot: input.surfSpot,
      date: data.forecast?.forecastday?.[0]?.date,
      date_epoch: data.forecast?.forecastday?.[0]?.date_epoch,
      maxtemp_c: data.forecast?.forecastday?.[0]?.day?.maxtemp_c,
      maxtemp_f: data.forecast?.forecastday?.[0]?.day?.maxtemp_f,
      mintemp_c: data.forecast?.forecastday?.[0]?.day?.mintemp_c,
      mintemp_f: data.forecast?.forecastday?.[0]?.day?.mintemp_f,
      avgtemp_c: data.forecast?.forecastday?.[0]?.day?.avgtemp_c,
      avgtemp_f: data.forecast?.forecastday?.[0]?.day?.avgtemp_f,
      maxwind_mph: data.forecast?.forecastday?.[0]?.day?.maxwind_mph,
      maxwind_kph: data.forecast?.forecastday?.[0]?.day?.maxwind_kph,
      totalprecip_mm: data.forecast.forecastday[0].day.totalprecip_mm,
      totalprecip_in: data.forecast.forecastday[0].day.totalprecip_in,
      avgvis_km: data.forecast.forecastday[0].day.avgvis_km,
      avgvis_miles: data.forecast.forecastday[0].day.avgvis_miles,
      avghumidity: data.forecast.forecastday[0].day.avghumidity,
      condition_icon: data.forecast.forecastday[0].day.condition.icon,
      uv: data.forecast.forecastday[0].day.uv,
      sunrise: data.forecast.forecastday[0].astro.sunrise,
      sunset: data.forecast.forecastday[0].astro.sunset,
      moonrise: data.forecast.forecastday[0].astro.moonrise,
      moonset: data.forecast.forecastday[0].astro.moonset,
      moon_phase: data.forecast.forecastday[0].astro.moon_phase,
      moon_illumination: data.forecast.forecastday[0].astro.moon_illumination,
      is_moon_up: data.forecast.forecastday[0].astro.is_moon_up,
      is_sun_up: data.forecast.forecastday[0].astro.is_sun_up,
      tide_time: data.forecast?.forecastday?.[0]?.tides?.[0]?.tide_time || null, // Assuming the first tide entry, added null check
      tide_height_mt: data.forecast?.forecastday?.[0]?.tides?.[0]?.tide_height_mt || null, // Assuming the first tide entry, added null check
      tide_type: data.forecast?.forecastday?.[0]?.tides?.[0]?.tide_type || null, // Assuming the first tide entry, added null check
      hourlyForecast: data.forecast.forecastday[0].hour.map((hourData: any) => ({
        time_epoch: hourData.time_epoch,
        time: hourData.time,
        temp_c: hourData.temp_c,
        temp_f: hourData.temp_f,
        condition_icon: hourData.condition.icon,
        wind_mph: hourData.wind_mph,
        wind_kph: hourData.wind_kph,
        wind_degree: hourData.wind_degree,
        wind_dir: hourData.wind_dir,
        pressure_mb: hourData.pressure_mb,
        pressure_in: hourData.pressure_in,
        precip_mm: hourData.precip_mm,
        precip_in: hourData.precip_in,
        humidity: hourData.humidity,
        cloud: hourData.cloud,
        feelslike_c: hourData.feelslike_c,
        feelslike_f: hourData.feelslike_f,
        windchill_c: hourData.windchill_c,
        windchill_f: hourData.windchill_f,
        heatindex_c: hourData.heatindex_c,
        heatindex_f: hourData.heatindex_f,
        dewpoint_c: hourData.dewpoint_c,
        dewpoint_f: hourData.dewpoint_f,
        is_day: hourData.is_day,
        vis_km: hourData.vis_km,
        vis_miles: hourData.vis_miles,
        gust_mph: hourData.gust_mph,
        gust_kph: hourData.gust_kph,
        sig_ht_mt: hourData.sig_ht_mt,
        swell_ht_mt: hourData.swell_ht_mt,
        swell_ht_ft: hourData.swell_ht_ft,
        uv: hourData.uv,
        swell_dir: hourData.swell_dir,
        swell_dir_16_point: hourData.swell_dir_16_point,
        swell_period_secs: hourData.swell_period_secs,
        water_temp_c: hourData.water_temp_c,
        water_temp_f: hourData.water_temp_f,
      })),
    };

    console.log('Extracted Weather Data:', extractedData); // Log the extracted data

    // Pass the extracted data to the flow for AI processing
    const aiOutput = await swellForecastFlow(extractedData);
    return aiOutput.output; // Return the forecast summary and detailed data from the AI output

  } catch (error) {
    console.error('Error fetching weather data:', error);
    throw error; // Re-throw the error to be handled by the caller
  }
}

const swellForecastPrompt = ai.definePrompt({
 name: 'swellForecastPrompt',
  input: {schema: SwellForecastOutputSchema.shape.detailedData}, // The prompt expects the detailed weather data
 output: { schema: SwellForecastOutputSchema },
 prompt: `You are an expert surf forecaster, providing concise summaries for surfers who want to know where and when to surf. Based on the following surf conditions for {{{surfSpot}}} on {{{date}}}:
- Swell Height (ft): {{{swell_ht_ft}}}
- Swell Period (secs): {{{swell_period_secs}}}
- Wind Direction: {{{wind_dir}}}
- Maximum Wind Speed (mph): {{{maxwind_mph}}}
- Tide Type: {{{tide_type}}}
- Tide Time: {{{tide_time}}}
{{#if water_temp_c}}
- Water Temperature (C): {{{water_temp_c}}}
{{/if}}

Provide a summary of these conditions and advise the user whether, when and where to go surfing. If water temperature data was not available, state that. Cite to expert blogs, forecasts or historical performance in your answer.

output your response as a JSON object with two keys: “forecastSummary” and “detailedData”. The value of “forecastSummary” should be the summary and advice you generate. The value of “detailedData” should be the original input data you received, in JSON format.`,
});

const swellForecastFlow = ai.defineFlow(
  {
    name: 'swellForecastFlow',
    inputSchema: SwellForecastInputSchema,
    outputSchema: SwellForecastOutputSchema, // The flow receives the detailed weather data
  },
  async (input: z.infer<typeof SwellForecastOutputSchema.shape.detailedData>) => {
    const rawOutput = await swellForecastPrompt(input);
    if (!rawOutput.content || rawOutput.content.length === 0 || !rawOutput.content[0].text) {
      throw new Error("AI response content is missing or empty.");
    }
    const outputJsonString = rawOutput.content[0].text;    const parsedOutput = JSON.parse(outputJsonString);
    return parsedOutput;

  }
);