// This file is generated by EVERYBodYsurf

/**
 * @fileOverview Provides a GenAI-powered surf report and/or forecast 
 * witch full detail for pros, and user-friendly summarries for newbies.
 *
 * - getSwellForecast - A function that generates a swell forecast summary.
 * - SwellForecastInput - The input type for the getSwellForecast function.
 * - SwellForecastOutput - The return type for the getSwellForecast function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const SwellForecastInputSchema = z.object({ // This is the schema for the input received by the `getSwellForecast` function
 surfSpot: z.string().describe('The name of the surf spot to get the swell forecast for.'),//
  water_temp_c: z.number().optional().describe('Water temperature in Celsius.'),
});

export type SwellForecastInput = z.infer<typeof SwellForecastInputSchema>;

const SwellForecastOutputSchema = z.object({
  forecastSummary: z.string().describe('A concise, user-friendly summary of the surf conditions for the specified surf spot, including wave height, period, wind, and tide information. It should also advise the user whether, when and where to go surfing, citing to expert blogs, forecasts or historical performance in its answer.'),
  detailedData: z.object({ // This is the schema for the detailed data that the AI model will receive
    surfSpot: z.string().describe('The name of the surf spot to get the swell forecast for.'), //
    date: z.string().describe('Date of the forecast.'),
    maxtemp_c: z.number().describe('Maximum temperature in Celsius.'),
    mintemp_c: z.number().describe('Minimum temperature in Celsius.'),
    maxwind_mph: z.number().describe('Maximum wind speed in miles per hour.'),
    wind_dir: z.string().describe('Wind direction.'),
    totalprecip_mm: z.number().describe('Total precipitation in millimeters.'),
    avgvis_km: z.number().describe('Average visibility in kilometers.'),
    avghumidity: z.number().describe('Average humidity.'),
    uv: z.number().describe('UV index.'),
    sunrise: z.string().describe('Sunrise time.'),
    sunset: z.string().describe('Sunset time.'),
    moon_phase: z.string().describe('Moon phase.'),
    moon_illumination: z.number().describe('Moon illumination percentage.'),
    tide_time: z.string().describe('Time of the tide.'),
    tide_height_mt: z.number().describe('Height of the tide in meters.'),
    tide_type: z.string().describe('Type of the tide (e.g., HIGH, LOW).'),
    sig_ht_mt: z.number().describe('Significant wave height in meters.'),
    swell_ht_mt: z.number().describe('Swell height in meters.'),
    swell_ht_ft: z.number().describe('Swell height in feet.'),
    swell_dir_16_point: z.string().describe('Swell direction in 16-point compass.'),
    swell_period_secs: z.number().describe('Swell period in seconds.'),
    water_temp_c: z.number().describe('Water temperature in Celsius.'),
  }).describe('Detailed extracted weather and swell data.'),
});
export type SwellForecastOutput = z.infer<typeof SwellForecastOutputSchema>;

export async function getSwellForecast(input: { surfSpot: string; date: string }): Promise<SwellForecastOutput> {
 console.log('getSwellForecast function called with input:', input);
  const API_KEY = process.env.WEATHER_API_DOTCOM_KEY;
  const BASE_URL = 'https://api.weatherapi.com/v1/marine.json';

  const url = `${BASE_URL}?key=${API_KEY}&q=${input.surfSpot}&dt=${input.date}&days=1&aqi=no&alerts=no&tides=yes`;
 console.log('Fetching weather data from URL:', url);
  try {
    const response = await fetch(url);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

        console.log('WeatherAPI Response Data:', data);

    // Extract relevant data based on the schema
    const extractedData = {
      surfSpot: input.surfSpot,
      date: data.forecast?.forecastday?.[0]?.date,
      maxtemp_c: data.forecast?.forecastday?.[0]?.day?.maxtemp_c,
      mintemp_c: data.forecast?.forecastday?.[0]?.day?.mintemp_c,
      maxwind_mph: data.forecast?.forecastday?.[0]?.day?.maxwind_mph,
      wind_dir: data.forecast?.forecastday?.[0]?.day?.wind_dir,
      totalprecip_mm: data.forecast.forecastday[0].day.totalprecip_mm,
      avgvis_km: data.forecast.forecastday[0].day.avgvis_km,
      avghumidity: data.forecast.forecastday[0].day.avghumidity,
      uv: data.forecast.forecastday[0].day.uv,
      sunrise: data.forecast.forecastday[0].astro.sunrise,
      sunset: data.forecast.forecastday[0].astro.sunset,
      moon_phase: data.forecast.forecastday[0].astro.moon_phase,
      moon_illumination: data.forecast.forecastday[0].astro.moon_illumination,
      tide_time: data.forecast?.forecastday?.[0]?.tides?.[0]?.tide_time || null, // Assuming the first tide entry, added null check
      tide_height_mt: data.forecast?.forecastday?.[0]?.tides?.[0]?.tide_height_mt || null, // Assuming the first tide entry, added null check
      tide_type: data.forecast?.forecastday?.[0]?.tides?.[0]?.tide_type || null, // Assuming the first tide entry, added null check
      sig_ht_mt: data.forecast.forecastday[0].hour[0].sig_ht_mt, // Assuming the first hour entry
      swell_ht_ft: data.forecast.forecastday[0].hour[0].swell_ht_ft, // Assuming the first hour entry
      swell_dir_16_point: data.forecast.forecastday[0].hour[0].swell_dir_16_point, // Assuming the first hour entry
      swell_period_secs: data.forecast.forecastday[0].hour[0].swell_period_secs, // Assuming the first hour entry
      water_temp_c: data.forecast.forecastday[0].hour[0].water_temp_c, // Assuming the first hour entry
    };

    console.log('Extracted Weather Data:', extractedData); // Log the extracted data

    // Pass the extracted data to the flow for AI processing
    const aiOutput = await swellForecastFlow(extractedData);
    return aiOutput.output; // Return the forecast summary and detailed data from the AI output

  } catch (error) {
    console.error('Error fetching weather data:', error);
    throw error; // Re-throw the error to be handled by the caller
  }
}

const swellForecastPrompt = ai.definePrompt({
 name: 'swellForecastPrompt',
  input: {schema: SwellForecastOutputSchema.shape.detailedData}, // The prompt expects the detailed weather data
 output: { schema: SwellForecastOutputSchema },
 prompt: `You are an expert surf forecaster, providing concise summaries for surfers who want to know where and when to surf. Based on the following surf conditions for {{{surfSpot}}} on {{{date}}}:
- Swell Height (ft): {{{swell_ht_ft}}}
- Swell Period (secs): {{{swell_period_secs}}}
- Wind Direction: {{{wind_dir}}}
- Maximum Wind Speed (mph): {{{maxwind_mph}}}
- Tide Type: {{{tide_type}}}
- Tide Time: {{{tide_time}}}
{{#if water_temp_c}}
- Water Temperature (C): {{{water_temp_c}}}
{{/if}}

Provide a summary of these conditions and advise the user whether, when and where to go surfing. If water temperature data was not available, state that. Cite to expert blogs, forecasts or historical performance in your answer.

output your response as a JSON object with two keys: “forecastSummary” and “detailedData”. The value of “forecastSummary” should be the summary and advice you generate. The value of “detailedData” should be the original input data you received, in JSON format.`,
});

const swellForecastFlow = ai.defineFlow(
  {
    name: 'swellForecastFlow',
    inputSchema: SwellForecastInputSchema,
    outputSchema: SwellForecastOutputSchema, // The flow receives the detailed weather data
  },
  async (input: z.infer<typeof SwellForecastOutputSchema.shape.detailedData>) => {
    const rawOutput = await swellForecastPrompt(input);
    if (!rawOutput.content || rawOutput.content.length === 0 || !rawOutput.content[0].text) {
      throw new Error("AI response content is missing or empty.");
    }
    const outputJsonString = rawOutput.content[0].text;    const parsedOutput = JSON.parse(outputJsonString);
    return parsedOutput;

  }
);
